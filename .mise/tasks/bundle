#!/usr/bin/env bash
# mise description="Bundles the CLI for distribution"

set -euo pipefail

# Usage
# CERTIFICATE_PASSWORD=xxxxx APPLE_ID=email APP_SPECIFIC_PASSWORD=xxx mise run bundle

TMP_DIRECTORY=$(mktemp -d)
TMP_KEYCHAIN_PATH=$TMP_DIRECTORY/keychain.keychain
KEYCHAIN_PASSWORD=$(uuidgen)
ENCRYPTED_CERTIFICATE_PATH=$MISE_PROJECT_ROOT/certificates/certificate.p12.enc
CERTIFICATE_PATH=$TMP_DIRECTORY/certificate.p12
BUILD_DIRECTORY=$MISE_PROJECT_ROOT/build
DERIVED_DATA_PATH=$BUILD_DIRECTORY/derived
BUILD_DIRECTORY_BINARY=$DERIVED_DATA_PATH/Build/Products/Release/virtualos
BUILD_ARTIFACTS_DIRECTORY=$BUILD_DIRECTORY/artifacts
BUILD_ZIP_PATH=$BUILD_ARTIFACTS_DIRECTORY/virtualos.zip
SHASUMS256_FILE=$BUILD_ARTIFACTS_DIRECTORY/SHASUMS256.txt
SHASUMS512_FILE=$BUILD_ARTIFACTS_DIRECTORY/SHASUMS512.txt
TEAM_ID='U6LC622NKF'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_status() {
    echo -e "${YELLOW}$1${NC}"
}

# Remove temporary directory on exit
trap "rm -rf $TMP_DIRECTORY" EXIT

# Decrypt the certificate
print_status "Decrypting the certificate..."
openssl enc -aes-256-cbc -d -pbkdf2 -in $ENCRYPTED_CERTIFICATE_PATH -out $CERTIFICATE_PATH -pass pass:"$CERTIFICATE_ENCRYPTION_PASSWORD"

# Build
print_status "Building the virtualos..."
tuist generate --path $MISE_PROJECT_ROOT --no-open
tuist build --clean --path $MISE_PROJECT_ROOT virtualos -- -configuration Release -destination generic/platform=macOS -derivedDataPath $DERIVED_DATA_PATH

# Codesign
print_status "Code signing virtualos..."
security create-keychain -p $KEYCHAIN_PASSWORD $TMP_KEYCHAIN_PATH
security default-keychain -s $TMP_KEYCHAIN_PATH
security import $CERTIFICATE_PATH -P $CERTIFICATE_PASSWORD -A
codesign --force --options runtime --sign "Developer ID Application: Tuist GmbH (U6LC622NKF)" $BUILD_DIRECTORY_BINARY

# Notarize
print_status "Submitting virtualos for notarization..."
mkdir -p $BUILD_ARTIFACTS_DIRECTORY
ditto -c -k --keepParent $BUILD_DIRECTORY_BINARY $BUILD_ZIP_PATH
SUBMISSION_ID=$(xcrun notarytool submit "${BUILD_ZIP_PATH}" \
    --apple-id "$APPLE_ID" \
    --team-id "$TEAM_ID" \
    --password "$APP_SPECIFIC_PASSWORD" \
    --output-format json | jq -r '.id')

while true; do
    STATUS=$(xcrun notarytool info "$SUBMISSION_ID" \
        --apple-id "$APPLE_ID" \
        --team-id "$TEAM_ID" \
        --password "$APP_SPECIFIC_PASSWORD" \
        --output-format json | jq -r '.status')

    case $STATUS in
        "Accepted")
            echo -e "${GREEN}Notarization succeeded!${NC}"
            break
            ;;
        "In Progress")
            print_status "Notarization in progress... waiting 30 seconds"
            sleep 30
            ;;
        "Invalid"|"Rejected")
            echo "Notarization failed with status: $STATUS"
            xcrun notarytool log "$SUBMISSION_ID" \
                --apple-id "$APPLE_ID" \
                --team-id "$TEAM_ID" \
                --password "$APP_SPECIFIC_PASSWORD"
            exit 1
            ;;
        *)
            echo "Unknown status: $STATUS"
            exit 1
            ;;
    esac
done

# Generathing shasums
print_status "Generating shasums..."
for file in "$BUILD_ARTIFACTS_DIRECTORY"/*; do
    if [ -f "$file" ] && [[ $(basename "$file") != SHASUMS* ]]; then
        shasum -a 256 "$file" | awk '{print $1 "  " FILENAME}' FILENAME=$(basename "$file") >> $SHASUMS256_FILE
        shasum -a 512 "$file" | awk '{print $1 "  " FILENAME}' FILENAME=$(basename "$file") >> $SHASUMS512_FILE
    fi
done
